// ChromeOps.idl: ChromeOps 的 IDL 源

// 此文件将由 MIDL 工具处理以
// 生成类型库(ChromeOps.tlb)和封送处理代码。

import "oaidl.idl";
import "ocidl.idl";
[
	object,
		uuid(a817e7a2-43fa-11d0-9e44-00aa00b6770a),
		dual,
		pointer_default(unique)
]
interface IComponentRegistrar : IDispatch
{
	[id(1)] HRESULT Attach([in] BSTR bstrPath);
	[id(2)] HRESULT RegisterAll();
	[id(3)] HRESULT UnregisterAll();
	[id(4)] HRESULT GetComponents([out] SAFEARRAY(BSTR)* pbstrCLSIDs, [out] SAFEARRAY(BSTR)* pbstrDescriptions);
	[id(5)] HRESULT RegisterComponent([in] BSTR bstrCLSID);
	[id(6)] HRESULT UnregisterComponent([in] BSTR bstrCLSID);
};

[
	object,
		uuid(8ebd25f7-377d-457d-8d9b-65e8f8b8daae),
		dual,
		nonextensible,
		pointer_default(unique)
]
interface IChromeOpsSoft : IDispatch
{
	[id(1)] HRESULT getVersion([out, retval]BSTR* ret);
	[id(2)] HRESULT chromeBind([in]BSTR host, [in]int port, [out, retval]int* retVal);
	[id(3)] HRESULT pushArgs([in]BSTR arg);
	[id(4)] HRESULT launch([in]BSTR chromeFullPath, [in]int tryBind, [out, retval]int* retVal);
	[id(5)] HRESULT findTargetList([out, retval]BSTR* targetList);
	[id(6)] HRESULT switchTab([in]BSTR tabId, [out, retval]int* ret);
	[id(7)] HRESULT getOuterHTML([in]BSTR selector, [out, retval]BSTR* retVal);
	[id(8)] HRESULT navigate([in]BSTR url, [in]BSTR referrer);
	[id(9)] HRESULT isLoadingFinished([out, retval]int* retVal);
	[id(10)] HRESULT runScript([in]BSTR expression, [out, retval]BSTR* retVal);
	[id(11)] HRESULT captureScreenshot([in]BSTR format, [in]int quality, [in]int x, [in]int y, [in]int width, [in]int height, [in]float scale, [in]BSTR imgFullPath);
	[id(12)] HRESULT inputText([in]BSTR selector, [in]BSTR txt);
	[id(13)] HRESULT getCookies([in]BSTR urls, [out, retval]BSTR* retVal);
	[id(14)] HRESULT setCookie([in]BSTR name, [in]BSTR value, [in]BSTR url, [in]BSTR domain, [in]BSTR path, [in]int secure, [in]int httpOnly, [in]BSTR sameSite, [in]int expires);
	[id(15)] HRESULT setCookies([in]BSTR jsonCookies);
	[id(16)] HRESULT clearBrowserCache();
	[id(17)] HRESULT clearBrowserCookies();
	[id(18)] HRESULT setCacheDisabled([in]int cacheDisabled);
	[id(19)] HRESULT captureFullScreenshot([in]BSTR format, [in]int quality, [in]BSTR imgFullPath);
	[id(20)] HRESULT parseJson([in]BSTR jsonBStr, [out, retval]BSTR* retVal);
	[id(21)] HRESULT getJsonValue([in]BSTR uuidStr, [in]int idx, [in]BSTR keyPath, [out, retval]BSTR* retVal);
	[id(22)] HRESULT createTarget([in]BSTR url, [out, retval]BSTR* retVal);
	[id(23)] HRESULT closeTarget([in]BSTR targetId);
	[id(24)] HRESULT getLastTargetId([out, retval]BSTR* retVal);
	[id(25)] HRESULT getJsonArraySize([in]BSTR uuidStr, [out, retval]int* retVal);
};
[
	uuid(51fb357f-0e50-40b7-bcbe-290e42e2af6c),
		version(1.0),
		custom(a817e7a1-43fa-11d0-9e44-00aa00b6770a, "{bd6c7821-d56c-4b78-87fc-52713f38eecd}")
]
library ChromeOpsLib
{
	importlib("stdole2.tlb");
	[
		uuid(bd6c7821-d56c-4b78-87fc-52713f38eecd)
	]
		coclass CompReg
	{
		[default] interface IComponentRegistrar;
	};
	[
		uuid(c44295a9-d02c-49aa-95a1-f1bbabb8527a)
	]
		coclass ChromeOpsSoft
	{
		[default] interface IChromeOpsSoft;
	};
};

import "shobjidl.idl";
